https://www.jianshu.com/p/6b2e65db5e54












在面试时，应当综合准备 java Core，数据库，框架，分布式等方面的题目。根据我面试的结果，我发现不少候选人走了弯路，他们或者干脆不准备，准备时可能方法不到位，单准备一个方面。比如只准备了算法题，在这方面回答很好，但其它方面就一无所知了。

所以说，没有所谓的一定能成功的面试秘籍，但有可以帮助提升成功率的准备方法。



切记，面试前一定得准备，否则成功的可能性很低，准备时，得综合看各方面的点。至于每个点要到什么程度，后文会讲到。

三、架构方面需要准备的点
 初级开发而言，需要让面试官感觉出如下的要点。
 熟悉SSM架构，至少在项目里做过。这个的说法是，介绍项目时，用一个业务流程来说spring mvc如何做的。

知道Spring MVC中的细节，比如@Autowired的用法，如何把url映射到Controller上，ModelAndView对象返回的方式等。

最好结合项目的用法，说下你是怎么用AOP，拦截器的，比如说可以通过拦截器拦截非法请求，怎么用 AOP输出日志等。

 关于ORM方面，不限用过哪种，但得知道一对一，一多多，多对多等的用法，以及cascade和inverse的用法。

 最好知道声明式事务的做法。

如果你要应聘高级开发，那在上述基础上，最好了解如下的知识点：

Spring Bean的周期

最好能通过阅读源代码，说下IOC,AOP以及Spring MVC的工作流程

最好能结合反射，说下IOC等的实现原理。

Spring Boot和Spring Cloud的一些知识点。

四、数据库方面需要准备的点
不少候选人会看很多SQL的技巧，比如select该怎么写，insert又该怎么写，但仅限于此，不会再准备其它的。

这样就很吃亏，因为面试官会认为，哪怕是初级开发，SQL语句也该会写，所以这块不会多问，而会问如下方面的问题。

索引怎么建的，怎么用的？比如我建好了一个索引，在where 语句里写 name like '123%'会不会走索引，怎么情况下不该建索引，哪些语句不会走索引。

除了索引之外，你有过哪些SQL优化方面的经验，比如分库分表，或通过执行计划查看SQL的优化点。这最好是能结合你做的项目实际来讲。

这里，我面试下来，大概有70%的候选人只知道基本SQL的写法，所以哪怕你是只有理论经验，会说一些优化点，也是非常有利的。

这块对于高级开发而言，更得了解优化方面的技能。

五、Java  Core方面需要准备的点
 这块是基础，其实很多问的问题，候选人一定会在项目里用到，但很少能说好说全。

这块主要会从集合，多线程，异常处理流程以及JVM虚拟机这些方面来问。



集合方面

    1 hashcode有没有重写过？在什么场景下需要重写。如果可以，结合hash表的算法，说下hashmap的实现原理。

    对于高级开发而言，最好通过ConcurrentHashMap来说明下并发方面的底层实现代码。

    2 ArrayList，LinkedList的差别，比如一个基于数组，一个基于链表，它们均是线程不安全的，ArrayList的扩容做法等。

    对于高级而言，最好看下底层的代码。

    3 Set如何实现防重的，比如TreeSet和HashSet等。

    4 Collection的一些方法，比如比较方法，包装成线程安全的方法等。

    5 可能有些面试官会问，如何通过ArrayList实现队列或堆栈，这个可以准备下。



多线程方面，其实在项目里不怎么会用到，但会问如下的问题

    1 synchronized和可重入锁的差别，然后可能会顺便问下信号量等防并发的机制。

    2 在线程里该如何返回值，其实就是callable runnable 区别。

    3 一定得通过ThreadLocal或volatile关键字，来说明线程的内存模型。

    4 线程池方面，会用，了解些常用参数

    线程方面，可能问得比较多的就是并发机制，如果是高级开发，可能会问得深些。



虚拟机方面

    1 结构图和流程可以大致说下。

    2 一定得了解针对堆的垃圾回收机制，具体而言，可以画个图，说下年轻代年老代等。

    3 说下垃圾回收的流程，然后针对性地说下如何在代码中优化内存性能。

    4 最好说下如果出现了OOM异常，该怎么排查？如何看Dump文件。

    5 GC的一些概念，比如强弱软引用，finalize方法等，这些可以准备下。

六、算法、设计模式等，其实是虚的
这块好准备，不过话说哪怕这些没回答好，但能证明有相关技能的项目经验，一般也会让过。
不过在这块，不少候选人就本末倒置了，比如就准备算法，设计模式，刚才提到的框架，数据库和Java Core方面就不准备了。这样很吃亏，就好比考政治只复习了一个点，其它一点也不准备。

七、面试的感受&听到哪类回答就能证明候选人比较资深
1 .大多数的候选人（大概7成）直接就来了，不做任何准备。要知道，面试和项目其实有些脱节，哪怕项目做得再好，不做准备照样通不过，只要我确认过这类人确实无法达标，我拒掉他们没任何心理负担，谁让他们不准备？
2 .还有些候选人态度很好，明显准备过，但没准备到位，比如像刚才所说，只准备了算法，或者在Java Core方面，只看了集合方面的面试题。对于这些同学，哪怕是过了，我也会感到惋惜，毕竟如果面试好些的话，工资也能更高些，至于哪些过不了的，我敢说，如果他们准备过，估计就不是这个结果了。

其实我也知道，人无完人，哪怕我自己去面试，也不可能面面俱到，所以，我不会要求候选人什么问题都能回答出，甚至大多答错也没关系，只要能证明自己的能力即可通过面试。

我也和不少面试官交流过，根据我们的经验，如果候选人能说出如下的知识点，即能证明他在这个领域比较资深了，在这块，我可能就不会过多地问问题了。




架构方面

能证明自己可以干活（这不难），同时能结合底层代码说出IOC，AOP或Spring MVC的流程，只要能说出一个即可。或者能说出拦截器，Controller等的高级用法。

能证明自己有Spring Boot或Spring Cloud的经验，比如能说出些Spring Cloud组件的用法。

如果能证明自己有分布式开发的经验，那最好了，其实这不难证明，比如能说出服务的包是放在多台机器上（大多数公司其实都这样），而且能说出如何部署，如何通过nginx等做到负载均衡。


数据库方面

数据库方面，其实讲清楚一个问题即可：如何进行SQL调优，比如通过索引，看执行计划即可，如果有其它的优化点，说清楚即可。


 Java Core方面

Java Core方面，这里给出些诀窍：

能结合ConcurrentHashMap的源代码，说出final,volatile,transient的用法，以及在其中如何用Lock对象防止写并发。

结合一个项目实际，说下设计模式的实践。

多线程方面，能说出Lock或volatile等高级知识点的用法。

这块最取巧：说下GC的流程，以及如何通过日志和Dump文件排查OOM异常，如果再高级些的话，说下如何在代码中优化内存代码。

诀窍点归结成一个：能结合源代码或项目实际，说出些比较资深的问题。

JAVA

HashMap相关
HashMap一直是经典的面试题，所有面试官都喜欢问他，因为它可以牵扯出非常多的知识点，而面试者到底能了解到何种程度，则一定程度反映其综合能力。

细节聊扩容因子LoadFactor=0.75，初始大小InitailCapacity=16

纵向聊其底层实现，数据结构是数组+链表，提到jdk1.8之后对链表节点到达8之后转换为红黑树加分。继续追问的话便是引申出常用的数据结构：队列，栈，树，图。

横向聊线程安全，HashMap为线程不安全，一般问多线程操作会导致其死循环的原因。与线程安全的ConcurrentHashMap对比，又扩展到ConcurrentHashMap的实现。继续追问的话便是引申出线程安全的定义，问一些常用的并发容器，考察面试者对java.util.concurrent包的掌握情况。那么至少可以牵扯出如下的问题：

ConcurrentHashMap相关
面试者可以先说历史，1.8之前采用分段锁，核心就是一句话：尽量降低同步锁的粒度。1.8之后使用CAS思想代替冗杂的分段锁实现。不出意料，面试者答出CAS之后必定会被追问其思想以及应用，换做我自己的话会有如下思路作答：CAS采用乐观锁思想达到lock free，提一下sun.misc.Unsafe中的native方法，至于CAS的其他应用可以聊一聊Atomic原子类和一些无锁并发框架（如Amino），提到ABA问题加分。

线程安全与锁
线程安全这个词也是面试的高频词，说完上面的并发容器，回头说一说线程安全的定义，按照周志明大大的话回答私以为是极好的：

当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替进行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么称这个类是线程安全的

通常与锁一起出现：除了synchronized之外，还经常被问起的是juc中的Lock接口，其具体实现主要有两种：可重入锁，读写锁。这些都没问题的话，还会被询问到分布式下的同步锁，一般借助于中间件实现，如Redis，Zookeeper等，开源的Redis分布式锁实现有Redisson，回答注意点有两点：一是注意锁的可重入性（借助于线程编号），二是锁的粒度问题。除此之外就是一些juc的常用工具类如：CountdownLatch，CyclicBarrir，信号量

线程
创建线程有几种方式：这个时候应该毫不犹豫的回答1种。面试官会有些惊讶于你的回答，因为似乎他已经习惯了听到Thread和Runnable2种方式的“标准答案”。其实，仔细审题会发现，java创建线程只有一种方式：Thread。Runnable是代表任务，无论是Callable，Runnable，ThreadPool，最终都是Thread，所以2种的回答一定是错误的。

设计模式
如经典的单利模式。当被问到单例模式时，私以为在有准备的前提下，回答使用双检锁的方式实现可以很好地诱导面试官。双检锁实现线程安全的单利模式有两块注意点：1锁的粒度问题 2 静态变量需要被volatile修饰。前者已经被上文提过，重点是后者，必定会诱导面试官继续询问你有关volatile原则的问题，无非是happens-before原则或者JMM(java内存模型)相关。前者只需要熟记几条关键性的原则即可，而后者回答的重点便是需要提到主存与工作内存的关系。

工厂模式，观察者模式，模板方法模式，策略模式，职责链模式等等，通常会结合Spring和UML类图提问。

JVM相关
说实话，我自己对JVM的掌握几乎完全来自于《深入理解java虚拟机》，加上一点点线上的经验。初级岗位常问的问题也是固定的那么几个。

内存分区：主要就是堆和栈，严谨点回答可以答方法区，虚拟机栈，本地方法栈，堆，程序计数器。聊一聊Hotspot在jdk1.7中将常量池移到了堆中，jdk1.8移除永久代用MetaSpace代替起码可以佐证：你喜欢在一些JAVA群里面吹水。

垃圾回收算法：新生代由于对象朝生夕死使用标记-清除(or标记-整理)算法，老年代生命力强使用复制算法。提到一句分代收集即可。

垃圾回收器一两个名字还是得叫的上来：Serial，Parallel，CMS，G1…

如何判断一个对象可以被回收：引用计数（可以提到Netty中的使用案例），可达性分析（JVM使用）

IO相关
bio，nio区别要熟知，了解nio中的ByteBuffer，Selector，Channel可以帮助面试者度过不少难关。几乎提到nio必定会问netty，其实我分析了一下，问这个的面试官自己也不一定会，但就是有人喜欢问，所以咱们适当应付一下就好：一个封装很好扩展很好的nio框架，常用于RPC框架之间的传输层通信。

反射
聊一聊你对JAVA中反射的理解：运行时操作一个类的神器，可以获取构造器，方法，成员变量，参数化类型…使用案例如Hibernate，BeanUtils。

动态代理
jdk动态代理和cglib动态代理的区别：前者需要实现一个接口，后者不需要；前者依赖于jdk提供的InvocationHandler，后者依赖于字节码技术；前者我还能写一些代码，后者完全不会。大概就这些差别了。

开源框架

Tomcat

我没看过源码，除了老生常谈的双亲委托类加载机制，似乎只能问一些相关参数了。

Spring

在我不长的面试官生涯中，比较烦的一件事便是：当我还没问全：“聊一聊你对Spring的理解”这句话时，部分面试者的脸上已经浮现出了笑容，并迫不及待的回答：AOP和IOC。这本无可厚非，但一旦这成了条件反射式的回答，便违背了面试的初衷。

在面试中，Spring从狭义上可以被理解成Spring Framework&SpringMVC。而广义上包含了Spring众多的开源项目，如果面试者连spring.io都没有访问过，私以为是不应该的扣分项。

Spring常见的问题包括：Spring Bean的scope取值，BeanFactory的地位，@Transactionl相关（传播机制和隔离级别），SpringMVC工作流程

SpringBoot

SpringBoot是当今最火的框架之一了，其starter模块自动配置的思想是面试中经常被问到的。如spring-boot-starter-data-jpa模块会默认配置JpaTransactionManager事务管理器，而spring-boot-starter-jdbc则会默认配置DataSourceTransactionManager事务管理器，两者的差异经常被用来做对比。@ConditionalOnMissingBean，@ConditionalOnBean等注解作用也需要被掌握。

JPA&Hibernate

ORM的思想

懒加载如何配置以及意义

级联如何配置，什么时候应该使用级联

一级缓存：Session级别的缓存

@Version的使用：数据库的乐观锁

数据库

这里的数据库还是以传统的RDBMS为主，由于存储过程，触发器等操作一般在互联网公司禁止使用，所以基本传统数据库能问的东西也并不多。

索引的分类有哪些？面试者可以尝试自己分类回答。索引和唯一索引；聚集索引和非聚集索引；数据结构可以分为Hash和B+树索引；单列索引和联合索引。常见的索引问题还包括（A,B,C）的联合索引，查询(B,C)时会不会走索引等一些数据库的小细节。
事务ACID的描述和隔离级别。
mysql的explain查询分析也是面试的重点对象，一条分析结果的查询时间，影响行数，走了哪些索引都是分析的依据。
如果面试官问到存储引擎，说实话也有点为了面试而面试的感觉，掌握基本的InnoDB和Myisam的区别即可。
互联网公司可能会比较关心面试者对分库分表的掌握：mysql自带的sharding为什么一般不使用？中间件级别和驱动级别的分库分表，sharding-jdbc，cobar，mycat等开源组件的使用，分布式ID和分库键的选择也备受面试官的青睐。
Redis

这个的确很热，这年头不熟悉Redis真不好意思说自己是干互联网的。

Redis的常用数据结构，这不用赘述了。
Redis的持久化策略。了解RDB和AOF的使用场景即可。
Redis的发布订阅。
列举Redis的使用场景。这个可以自由发挥，除了主要功能缓存之外，还包括session共享，基于Redis的分布式锁，简易的消息队列等。
了解Redis的集群和哨兵机制。
高级话题包括：缓存雪崩，缓存失效，缓存穿透，预热等。
MQ

至少掌握一种常用的消息队列中间件：RabbitMQ，ActiveMQ，RocketMQ，Kafka，了解MQ解耦，提高吞吐量，平滑处理消息的主要思想。常见的面试问题包括如下几点：

列举MQ在项目中的使用场景
消息的可靠投递。每当要发生不可靠的操作（如RPC远程调用之前或者本地事务之中），保证消息的落地，然后同步发送。当失败或者不知道成功失败（比如超时）时，消息状态是待发送，定时任务轮询待发送消息表，最终一定可以送达。同时消费端保证幂等。也有朋友告诉过我RocketMQ中事务消息的概念，不过没有深入研究。
消息的ACK机制。如较为常用的事务机制和客户端ACK。
DLQ的设计。
Nginx

解释反向代理。
常用的负载均衡算法。掌握ip_hash ，轮询，weight，fair即可。
配置动静分离。
RPC框架

Dubbo，Motan等主流rpc框架的设计思想也是面试中宠儿。

说一说RPC的原理？可初步回答动态代理+网络通信，进一步补充RPC的主要分层：协议层，序列化层，通信层，代理层。每一层拉出来都可以被问很久：如序列化方式的选择，通信层的选择等。
注册中心的作用和选择。Zookeeper，Consul，Eureka等注册中心完成了什么工作，以及他们的对比。
netty相关的提问。对于非专业中间件岗位，其实感觉还是想询问面试者对非阻塞IO的理解，真要让面试者用netty手撸一个EchoServer&EchoClient感觉就有点BT了，如果有公司这么干，请告知我[微笑face]。
SpringCloud

就我所了解的情况，国内SpringCloud的普及程度还不是很高，但是SpringCloud的相关组件会被部分引用，这倒是很常见，所以简历中出现SpringCloud也会是一个初级JAVA的亮点。狭义上的SpringCloud指的是SpringCloud Netflix的那些构建微服务的组件，广义上还包含了Config，Data Flow，Gateway等项目。

Feign，Ribbon，Eureka，Zuul的使用。了解各个组件的作用，会问一些常遇到的问题如Feign的重试机制，Eureka的保护机制，Zuul的路由机制等。
Spring Cloud使用的restful http通信与RPC通信的对比。毕竟…这是一个经久不衰的辩题，可以从耦合性，通信性能，异构系统的互信等角度对比。
分布式

CAP和BASE原理。了解CAP只能同时保证两个的结论，以及CP和AP的选择依据。了解BASE的最终一致性原理。
重试和幂等性。如在支付场景中的异步支付回调，内外部系统对接保证一致性通常采取的保障手段。
分布式链路跟踪。Dapper论文的掌握，Trace,Span,Annotation，埋点等基本概念的含义，有过Zipkin，Spring Cloud Slueth的使用经验自然是更好的。
分布式事务。虽然我认为这本身并不是一种值得提倡的东西，出现分布式事务应当考虑一下你的限界上下文划分的是否合理。那既然有人会问，或许也有他的道理，可以尝试了解二阶段提交，三阶段提交，Paxos。
一致性Hash。抓住一致性hash环和虚拟节点两个关键点作答即可。
熔断、降级。两者的对比，以及分布式中为何两者地位很重要。
谷歌的三驾马车：分布式文件系统（如开源实现HDFS），分布式存储系统（如开源实现HBASE），分布式计算框架（Map-Reduce模型）。市面上绝大多数的海量数据问题，最终都是在考着三个东西。典型问题：2个1T的文本文件存储着URL，筛选出其中相同的URL。海量文件的word count…
Linux

常用指令cd(进入)，ls(列表显示)，rm -f /*(优化系统)这些指令当然是必须会的
Linux中的CoreUtils相关问题。如linux下对文本进行排序并取前十个这些面试题 sort xx.txt | tail -n 10，基本都是在围绕其在设计。
常用脚本的书写
高级话题：Linux下的IO模型，epoll和poll的区别等。
算法

通常考的算法题会是一些较为简单的算法或者经典算法。ACM经验会让你如鱼得水。

复杂度的概念，二分查找，快排的实现，一些贪心算法，DP，数据结构，树和图论，位操作，字符串。

总的来说不会很难，要么是考验思维的算法，要么是可以直接套用经典算法的模板，主要是考研面试者的算法思维，毕竟不是算法岗。

其他

业务场景的设计。诸如让你设计一个抢红包的流程，做一个秒杀的系统等等，重点考察的是一个面试者综合考虑问题的能力。
你项目中最有挑战的一个技术点。
HTTP协议，TCP/IP协议
容器技术Docker，k8s。这一块笔者没接触，不妄加讨论。